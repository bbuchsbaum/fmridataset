[{"path":"https://bbuchsbaum.github.io/fmridataset/CLAUDE.html","id":null,"dir":"","previous_headings":"","what":"CLAUDE.md","title":"CLAUDE.md","text":"file provides guidance Claude Code (claude.ai/code) working code repository.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmridataset/CLAUDE.html","id":"build-and-check","dir":"","previous_headings":"Common Development Commands","what":"Build and Check","title":"CLAUDE.md","text":"","code":"# Build package R CMD build . devtools::build()  # Check package (CRAN compliance) R CMD check devtools::check()  # Install package locally R CMD INSTALL . devtools::install()"},{"path":"https://bbuchsbaum.github.io/fmridataset/CLAUDE.html","id":"testing","dir":"","previous_headings":"Common Development Commands","what":"Testing","title":"CLAUDE.md","text":"","code":"# Run custom test suite Rscript tests/run_tests.R  # Run testthat tests devtools::test() testthat::test_dir(\"tests/testthat\")  # Run a single test file testthat::test_file(\"tests/testthat/test-sampling-frame.R\")"},{"path":"https://bbuchsbaum.github.io/fmridataset/CLAUDE.html","id":"documentation","dir":"","previous_headings":"Common Development Commands","what":"Documentation","title":"CLAUDE.md","text":"","code":"# Generate package documentation devtools::document() roxygen2::roxygenize()  # Build pkgdown website pkgdown::build_site()"},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmridataset/CLAUDE.html","id":"core-classes","dir":"","previous_headings":"High-Level Architecture","what":"Core Classes","title":"CLAUDE.md","text":"Supports multiple data sources: file paths, pre-loaded objects, matrices, BIDS datasets Lazy loading chunked iteration capabilities Constructor: fmri_dataset_create() various helper functions Encapsulates TR, run lengths, temporal properties Bridges fmrireg fmridataset conventions Constructor: sampling_frame() Basic BIDS project wrapping Discovery quality assessment features Simple caching parallel processing","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/CLAUDE.html","id":"key-design-patterns","dir":"","previous_headings":"High-Level Architecture","what":"Key Design Patterns","title":"CLAUDE.md","text":"Generic functions R/aaa_generics.R Method dispatch pattern throughout Constructor pattern: new_*() (internal) → *() (user-facing) BIDS queries use method chaining: bids_query() %>% subject(\"01\") %>% task(\"rest\") Modular preprocessing pipeline R/transformations.R Composable transformations via transformation_pipeline() Backwards compatible legacy apply_preprocessing","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/CLAUDE.html","id":"file-organization","dir":"","previous_headings":"High-Level Architecture","what":"File Organization","title":"CLAUDE.md","text":"R/aaa_generics.R - S3 generic function definitions (loaded first) R/fmri_dataset_*.R - Core dataset functionality split concern R/bids_facade_phase*.R - BIDS implementation phases (1-3) R/sampling_frame.R - Temporal structure handling R/utils.R - Helper functions tests/testthat/test-*.R - Comprehensive test coverage","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/CLAUDE.html","id":"testing-strategy","dir":"","previous_headings":"High-Level Architecture","what":"Testing Strategy","title":"CLAUDE.md","text":"package uses extensive testthat testing covering: - Constructor validation - Data access patterns - Chunking iteration - BIDS integration phases - Edge cases error handling Note: tests may fail placeholders future implementation - intentional documented test files.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/CLAUDE.html","id":"integration-points","dir":"","previous_headings":"High-Level Architecture","what":"Integration Points","title":"CLAUDE.md","text":"neuroim2: Optional dependency NeuroVec objects bidser: Optional BIDS backend iterators: Core dependency chunked data access tibble: Data frame representation architecture emphasizes loose coupling, allowing components evolve independently maintaining stable interfaces S3 generics.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to fmridataset","title":"Contributing to fmridataset","text":"welcome contributions fmridataset package! document provides guidelines contributing.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"","what":"Code Style","title":"Contributing to fmridataset","text":"package follows tidyverse style guide modifications: Line length: Maximum 120 characters Naming: Use snake_case functions variables Documentation: exported functions must roxygen2 documentation S3 methods: Follow pattern method_name.class_name","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/CONTRIBUTING.html","id":"development-setup","dir":"","previous_headings":"","what":"Development Setup","title":"Contributing to fmridataset","text":"Fork clone repository Install development dependencies: Load package development mode:","code":"install.packages(c(\"devtools\", \"testthat\", \"lintr\", \"roxygen2\")) devtools::load_all()"},{"path":"https://bbuchsbaum.github.io/fmridataset/CONTRIBUTING.html","id":"making-changes","dir":"","previous_headings":"","what":"Making Changes","title":"Contributing to fmridataset","text":"Create new branch feature bug fix Write tests new functionality Ensure tests pass: devtools::test() Check package: devtools::check() Run linter: lintr::lint_package() Update documentation needed: devtools::document()","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/CONTRIBUTING.html","id":"backend-development","dir":"","previous_headings":"","what":"Backend Development","title":"Contributing to fmridataset","text":"’re adding new storage backend: Implement methods StorageBackend contract (see R/storage_backend.R) Validate backend validate_backend() Add comprehensive tests Document backend extending vignette","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/CONTRIBUTING.html","id":"testing","dir":"","previous_headings":"","what":"Testing","title":"Contributing to fmridataset","text":"Write tests using testthat Place test files tests/testthat/ Name test files test-<functionality>.R Use descriptive test names","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull Request Process","title":"Contributing to fmridataset","text":"Update NEWS.md changes Ensure CI checks pass Request review maintainers Address feedback","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/CONTRIBUTING.html","id":"questions","dir":"","previous_headings":"","what":"Questions?","title":"Contributing to fmridataset","text":"Feel free open issue questions contributing.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmridataset/SECURITY.html","id":"supported-versions","dir":"","previous_headings":"","what":"Supported Versions","title":"Security Policy","text":"project currently experimental development. Security updates provided recent version.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/SECURITY.html","id":"reporting-a-vulnerability","dir":"","previous_headings":"","what":"Reporting a Vulnerability","title":"Security Policy","text":"discover security vulnerability project, please report emailing maintainer directly rather opening public issue. Please report security vulnerabilities public GitHub issues. Include following information report: - description vulnerability - Steps reproduce issue - Potential impact - Suggested fix (available) can expect: - Acknowledgment report within 48 hours - Regular updates progress addressing vulnerability - Credit responsible disclosure (desired) Thank helping keep fmridataset package secure!","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/extending-backends.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Extending fmridataset with Custom Storage Backends","text":"fmridataset package now features pluggable backend architecture allows add support new data formats storage systems. vignette explains create storage backend.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/extending-backends.html","id":"architecture","dir":"Articles","previous_headings":"","what":"Architecture","title":"Extending fmridataset with Custom Storage Backends","text":"backend architecture separates data storage concerns high-level dataset interface:","code":"graph TD     A[fmri_dataset] --> B[StorageBackend]     B --> C[NiftiBackend]     B --> D[MatrixBackend]     B --> E[YourCustomBackend]     C --> F[NIfTI Files]     D --> G[In-Memory Matrix]     E --> H[Your Storage Format]"},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/extending-backends.html","id":"the-storagebackend-contract","dir":"Articles","previous_headings":"","what":"The StorageBackend Contract","title":"Extending fmridataset with Custom Storage Backends","text":"Every storage backend must implement following S3 methods:","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/extending-backends.html","id":"resource-management","dir":"Articles","previous_headings":"The StorageBackend Contract","what":"1. Resource Management","title":"Extending fmridataset with Custom Storage Backends","text":"","code":"backend_open(backend)   # Acquire resources (e.g., file handles) backend_close(backend)  # Release resources"},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/extending-backends.html","id":"data-access","dir":"Articles","previous_headings":"The StorageBackend Contract","what":"2. Data Access","title":"Extending fmridataset with Custom Storage Backends","text":"","code":"backend_get_dims(backend)     # Returns list(spatial = c(x,y,z), time = N) backend_get_mask(backend)     # Returns logical vector backend_get_data(backend, rows = NULL, cols = NULL)  # Returns matrix backend_get_metadata(backend) # Returns metadata list"},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/extending-backends.html","id":"example-creating-a-csv-backend","dir":"Articles","previous_headings":"","what":"Example: Creating a CSV Backend","title":"Extending fmridataset with Custom Storage Backends","text":"Let’s create simple backend reads fMRI data CSV files:","code":"#' Create a CSV Backend #'  #' @param data_file Path to CSV file with time series data #' @param mask_file Path to CSV file with mask (single row) #' @param spatial_dims Numeric vector of length 3 #' @return A csv_backend object csv_backend <- function(data_file, mask_file, spatial_dims) {   if (!file.exists(data_file)) {     stop(\"Data file not found: \", data_file)   }   if (!file.exists(mask_file)) {     stop(\"Mask file not found: \", mask_file)   }      structure(     list(       data_file = data_file,       mask_file = mask_file,       spatial_dims = spatial_dims,       data = NULL,       mask = NULL     ),     class = c(\"csv_backend\", \"storage_backend\")   ) }  #' Open CSV Backend backend_open.csv_backend <- function(backend) {   # Read data lazily on first access   backend }  #' Close CSV Backend   backend_close.csv_backend <- function(backend) {   # CSV files don't need explicit closing   invisible(NULL) }  #' Get Dimensions backend_get_dims.csv_backend <- function(backend) {   # Read just the header to get dimensions   header <- read.csv(backend$data_file, nrows = 1, check.names = FALSE)   n_timepoints <- length(readLines(backend$data_file)) - 1  # Subtract header   n_voxels <- ncol(header)      list(     spatial = backend$spatial_dims,     time = n_timepoints   ) }  #' Get Mask backend_get_mask.csv_backend <- function(backend) {   if (is.null(backend$mask)) {     backend$mask <- as.logical(as.matrix(       read.csv(backend$mask_file, header = FALSE)     ))   }   backend$mask }  #' Get Data backend_get_data.csv_backend <- function(backend, rows = NULL, cols = NULL) {   if (is.null(backend$data)) {     backend$data <- as.matrix(read.csv(backend$data_file))   }      data <- backend$data      if (!is.null(rows)) {     data <- data[rows, , drop = FALSE]   }   if (!is.null(cols)) {     data <- data[, cols, drop = FALSE]   }      data }  #' Get Metadata backend_get_metadata.csv_backend <- function(backend) {   list(     format = \"csv\",     data_file = backend$data_file,     mask_file = backend$mask_file   ) }"},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/extending-backends.html","id":"using-your-custom-backend","dir":"Articles","previous_headings":"","what":"Using Your Custom Backend","title":"Extending fmridataset with Custom Storage Backends","text":"implemented, can use backend fmri_dataset:","code":"# Create backend backend <- csv_backend(   data_file = \"timeseries.csv\",   mask_file = \"mask.csv\",    spatial_dims = c(64, 64, 40) )  # Create dataset dataset <- fmri_dataset(   backend,   TR = 2,   run_length = 300 )  # Use dataset normally data_matrix <- get_data_matrix(dataset) chunks <- data_chunks(dataset, nchunks = 10)"},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/extending-backends.html","id":"lazy-loading","dir":"Articles","previous_headings":"Best Practices","what":"1. Lazy Loading","title":"Extending fmridataset with Custom Storage Backends","text":"Load data needed:","code":"backend_get_data.my_backend <- function(backend, rows = NULL, cols = NULL) {   if (is.null(backend$cached_data)) {     backend$cached_data <- expensive_load_operation()   }   # Return requested subset }"},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/extending-backends.html","id":"error-handling","dir":"Articles","previous_headings":"Best Practices","what":"2. Error Handling","title":"Extending fmridataset with Custom Storage Backends","text":"Use custom error classes:","code":"backend_open.my_backend <- function(backend) {   tryCatch({     # Open file/connection   }, error = function(e) {     stop_fmridataset(       fmridataset_error_backend_io,       message = \"Failed to open backend\",       file = backend$source,       operation = \"open\"     )   }) }"},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/extending-backends.html","id":"validate-invariants","dir":"Articles","previous_headings":"Best Practices","what":"3. Validate Invariants","title":"Extending fmridataset with Custom Storage Backends","text":"mask must satisfy: - Length equals product spatial dimensions - Contains least one TRUE value - NA values","code":"backend_get_mask.my_backend <- function(backend) {   mask <- load_mask_somehow()      if (any(is.na(mask))) {     stop(\"Mask cannot contain NA values\")   }   if (sum(mask) == 0) {     stop(\"Mask must contain at least one TRUE value\")   }      mask }"},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/extending-backends.html","id":"performance-considerations","dir":"Articles","previous_headings":"Best Practices","what":"4. Performance Considerations","title":"Extending fmridataset with Custom Storage Backends","text":"chunked iteration, implement efficient slicing:","code":"backend_get_data.my_backend <- function(backend, rows = NULL, cols = NULL) {   # Don't load entire dataset if only subset needed   if (!is.null(rows) || !is.null(cols)) {     return(read_subset(backend$source, rows, cols))   }   # Full data load   read_full_data(backend$source) }"},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/extending-backends.html","id":"testing-your-backend","dir":"Articles","previous_headings":"","what":"Testing Your Backend","title":"Extending fmridataset with Custom Storage Backends","text":"Always validate backend implementation:","code":"# Create test backend backend <- my_backend(...)  # Validate contract compliance validate_backend(backend)  # Test with fmri_dataset dataset <- fmri_dataset(backend, TR = 2, run_length = 100)  # Verify basic operations work dims <- backend_get_dims(backend) mask <- backend_get_mask(backend)  data <- backend_get_data(backend)  # Test chunking doesn't load full dataset chunks <- data_chunks(dataset, nchunks = 10)"},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/extending-backends.html","id":"thread-safety","dir":"Articles","previous_headings":"Advanced Topics","what":"Thread Safety","title":"Extending fmridataset with Custom Storage Backends","text":"backend might used parallel contexts:","code":"backend_open.my_backend <- function(backend) {   # Each worker gets its own file handle   backend$handle <- open_connection(backend$source)   backend }"},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/extending-backends.html","id":"metadata-standards","dir":"Articles","previous_headings":"Advanced Topics","what":"Metadata Standards","title":"Extending fmridataset with Custom Storage Backends","text":"Include standard neuroimaging metadata available:","code":"backend_get_metadata.my_backend <- function(backend) {   list(     affine = extract_affine_matrix(),      # 4x4 transformation     voxel_dims = c(2, 2, 2),               # mm     TR = 2,                                # seconds     format_specific = list(...)            # Your format's metadata   ) }"},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/extending-backends.html","id":"contributing","dir":"Articles","previous_headings":"","what":"Contributing","title":"Extending fmridataset with Custom Storage Backends","text":"create useful backend, consider contributing package! See Contributing Guide details.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/fmridataset-intro.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to fmridataset","text":"fmridataset package provides unified S3 class system representing functional magnetic resonance imaging (fMRI) data different sources. package supports data raw matrices, NIfTI files, pre-loaded NeuroVec objects, consistent interface data access manipulation.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/fmridataset-intro.html","id":"key-features","dir":"Articles","previous_headings":"Introduction","what":"Key Features","title":"Introduction to fmridataset","text":"Unified Interface: Work data matrices, NIfTI files, NeuroVec objects Lazy Loading: File-based datasets load data accessed Flexible Data Access: Get data entire datasets specific runs Temporal Structure: Rich sampling frame representation TR run information Data Chunking: Built-support parallel processing workflows Event Integration: Support experimental event tables","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/fmridataset-intro.html","id":"package-philosophy","dir":"Articles","previous_headings":"Introduction","what":"Package Philosophy","title":"Introduction to fmridataset","text":"fmri_dataset objects designed : Simple: Straightforward construction usage Consistent: interface regardless data source Efficient: Lazy loading chunking large datasets Flexible: Support various fMRI data formats structures","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/fmridataset-intro.html","id":"dataset-types","dir":"Articles","previous_headings":"","what":"Dataset Types","title":"Introduction to fmridataset","text":"package provides three main dataset types: matrix_dataset: data already loaded R matrices fmri_mem_dataset: pre-loaded NeuroVec objects fmri_file_dataset: NIfTI files (lazy loading) latent_dataset: dimension-reduced data (requires fmristore package)","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/fmridataset-intro.html","id":"matrix-dataset","dir":"Articles","previous_headings":"Creating fMRI Dataset Objects","what":"Matrix Dataset","title":"Introduction to fmridataset","text":"simplest way create fmri_dataset matrix:","code":"library(fmridataset)  # Create synthetic fMRI data set.seed(123) n_timepoints <- 200 n_voxels <- 1000 fmri_matrix <- matrix(rnorm(n_timepoints * n_voxels),   nrow = n_timepoints,   ncol = n_voxels )  # Create dataset with temporal structure dataset <- matrix_dataset(   datamat = fmri_matrix,   TR = 2.0, # 2-second repetition time   run_length = c(100, 100) # Two runs of 100 timepoints each )  print(dataset)"},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/fmridataset-intro.html","id":"from-nifti-files","dir":"Articles","previous_headings":"Creating fMRI Dataset Objects","what":"From NIfTI Files","title":"Introduction to fmridataset","text":"real fMRI data stored NIfTI files:","code":"# Paths to your NIfTI files (one per run) file_paths <- c(   \"/path/to/run1.nii.gz\",   \"/path/to/run2.nii.gz\" )  # Path to brain mask mask_path <- \"/path/to/mask.nii.gz\"  # Create dataset from files dataset <- fmri_dataset(   scans = file_paths,   mask = mask_path,   TR = 2.5,   run_length = c(180, 180) # 180 timepoints per run )  # Data is loaded only when accessed print(dataset)"},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/fmridataset-intro.html","id":"from-neurovec-objects","dir":"Articles","previous_headings":"Creating fMRI Dataset Objects","what":"From NeuroVec Objects","title":"Introduction to fmridataset","text":"pre-loaded NeuroVec objects:","code":"# Create example NeuroVec objects d <- c(10, 10, 10, 100) # 10x10x10 voxels, 100 timepoints nvec1 <- neuroim2::NeuroVec(array(rnorm(prod(d)), d),   space = neuroim2::NeuroSpace(d) ) nvec2 <- neuroim2::NeuroVec(array(rnorm(prod(d)), d),   space = neuroim2::NeuroSpace(d) )  # Create a mask mask_dim <- d[1:3] mask <- neuroim2::NeuroVol(array(1, mask_dim),   space = neuroim2::NeuroSpace(mask_dim) )  # Create dataset from NeuroVec objects dataset <- fmri_mem_dataset(   scans = list(nvec1, nvec2),   mask = mask,   TR = 2.0,   run_length = c(100, 100) )  print(dataset)"},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/fmridataset-intro.html","id":"with-event-tables","dir":"Articles","previous_headings":"Creating fMRI Dataset Objects","what":"With Event Tables","title":"Introduction to fmridataset","text":"Add experimental design information:","code":"# Create event table events <- data.frame(   onset = c(10, 30, 50, 70, 110, 130, 150, 170),   duration = c(2, 2, 2, 2, 2, 2, 2, 2),   trial_type = rep(c(\"stimulus_A\", \"stimulus_B\"), 4),   run = c(1, 1, 1, 1, 2, 2, 2, 2) )  # Create dataset with events dataset <- matrix_dataset(   datamat = fmri_matrix,   TR = 2.0,   run_length = c(100, 100),   event_table = events )  print(dataset)"},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/fmridataset-intro.html","id":"basic-data-access","dir":"Articles","previous_headings":"Accessing Data and Metadata","what":"Basic Data Access","title":"Introduction to fmridataset","text":"","code":"# Get the complete data matrix data_matrix <- get_data_matrix(dataset) cat(\"Data dimensions:\", dim(data_matrix), \"\\n\")  # Get data for specific runs run1_data <- get_data_matrix(dataset, run_id = 1) cat(\"Run 1 dimensions:\", dim(run1_data), \"\\n\")  run23_data <- get_data_matrix(dataset, run_id = c(2, 3)) cat(\"Runs 2-3 dimensions:\", dim(run23_data), \"\\n\")"},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/fmridataset-intro.html","id":"alternative-data-access","dir":"Articles","previous_headings":"Accessing Data and Metadata","what":"Alternative Data Access","title":"Introduction to fmridataset","text":"","code":"# Using get_data() method (returns different format depending on dataset type) data_obj <- get_data(dataset)  # For matrix datasets, this is equivalent to get_data_matrix # For file datasets, this returns NeuroVec objects # For mem datasets, this returns the original NeuroVec objects"},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/fmridataset-intro.html","id":"temporal-structure","dir":"Articles","previous_headings":"Accessing Data and Metadata","what":"Temporal Structure","title":"Introduction to fmridataset","text":"","code":"# Access sampling frame sf <- dataset$sampling_frame print(sf)  # Get temporal properties using sampling frame methods cat(\"TR:\", get_TR(sf), \"seconds\\n\") cat(\"Number of runs:\", n_runs(sf), \"\\n\") cat(\"Total timepoints:\", n_timepoints(sf), \"\\n\") cat(\"Run lengths:\", get_run_lengths(sf), \"\\n\")  # Get block information cat(\"Block IDs:\", head(blockids(sf)), \"...\\n\") cat(\"Block lengths:\", blocklens(sf), \"\\n\")"},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/fmridataset-intro.html","id":"masks-and-spatial-information","dir":"Articles","previous_headings":"Accessing Data and Metadata","what":"Masks and Spatial Information","title":"Introduction to fmridataset","text":"","code":"# Get mask mask <- get_mask(dataset) cat(\"Mask dimensions:\", dim(mask), \"\\n\") cat(\"Voxels in mask:\", sum(mask > 0), \"\\n\")  # For volumetric datasets, mask is a NeuroVol # For matrix datasets, mask is a simple vector"},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/fmridataset-intro.html","id":"event-information","dir":"Articles","previous_headings":"Accessing Data and Metadata","what":"Event Information","title":"Introduction to fmridataset","text":"","code":"# Access event table events <- dataset$event_table if (nrow(events) > 0) {   print(head(events))    # Analyze events by type   event_counts <- table(events$trial_type)   print(event_counts) } else {   cat(\"No events in dataset\\n\") }"},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/fmridataset-intro.html","id":"data-chunking-for-parallel-processing","dir":"Articles","previous_headings":"","what":"Data Chunking for Parallel Processing","title":"Introduction to fmridataset","text":"data_chunks() function enables efficient processing large datasets:","code":"# Create chunks for parallel processing chunks <- data_chunks(dataset, nchunks = 4)  # Process each chunk for (chunk in chunks) {   cat(     \"Processing chunk\", chunk$chunk_num,     \"with\", ncol(chunk$data), \"voxels and\",     nrow(chunk$data), \"timepoints\\n\"   )    # Your analysis here...   # result <- your_analysis_function(chunk$data) }"},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/fmridataset-intro.html","id":"chunking-strategies","dir":"Articles","previous_headings":"Data Chunking for Parallel Processing","what":"Chunking Strategies","title":"Introduction to fmridataset","text":"","code":"# Chunk by runs (one chunk per run) run_chunks <- data_chunks(dataset, runwise = TRUE) cat(\"Number of run chunks:\", run_chunks$nchunks, \"\\n\")  # Chunk by voxels (default) voxel_chunks <- data_chunks(dataset, nchunks = 10) cat(\"Number of voxel chunks:\", voxel_chunks$nchunks, \"\\n\")  # Single chunk (all data) single_chunk <- data_chunks(dataset, nchunks = 1) cat(\"Single chunk with all data\\n\")"},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/fmridataset-intro.html","id":"using-with-foreach","dir":"Articles","previous_headings":"Data Chunking for Parallel Processing","what":"Using with foreach","title":"Introduction to fmridataset","text":"","code":"# Parallel processing with foreach if (requireNamespace(\"foreach\", quietly = TRUE)) {   library(foreach)    # Create chunks   chunks <- data_chunks(dataset, nchunks = 4)    # Process in parallel (or sequentially with %do%)   results <- foreach(chunk = chunks) %do% {     # Compute mean time series for this chunk     colMeans(chunk$data)   }    cat(\"Processed\", length(results), \"chunks\\n\")   cat(\"Each result has\", length(results[[1]]), \"values\\n\") }"},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/fmridataset-intro.html","id":"converting-between-dataset-types","dir":"Articles","previous_headings":"Type Conversions","what":"Converting Between Dataset Types","title":"Introduction to fmridataset","text":"","code":"# Convert any dataset to matrix format matrix_version <- as.matrix_dataset(dataset) cat(   \"Converted to matrix dataset with\",   ncol(matrix_version$datamat), \"voxels\\n\" )  # This loads all data into memory for file-based datasets # Use with caution for large datasets"},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/fmridataset-intro.html","id":"working-with-sampling-frames","dir":"Articles","previous_headings":"Advanced Examples","what":"Working with Sampling Frames","title":"Introduction to fmridataset","text":"","code":"# Create custom sampling frame sf <- sampling_frame(run_lengths = c(150, 120, 180), TR = 1.5)  # Explore sampling frame properties cat(\"Total duration:\", get_total_duration(sf), \"seconds\\n\") cat(\"Run durations:\", get_run_duration(sf), \"seconds\\n\") cat(\"Global onsets:\", global_onsets(sf), \"\\n\")  # Get sample indices for each run sample_indices <- samples(sf) cat(\"Samples for run 1:\", head(sample_indices[[1]]), \"...\\n\")"},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/fmridataset-intro.html","id":"custom-analysis-pipeline","dir":"Articles","previous_headings":"Advanced Examples","what":"Custom Analysis Pipeline","title":"Introduction to fmridataset","text":"","code":"# Define a simple analysis function analyze_chunk <- function(chunk_data) {   # Compute voxel-wise variance   voxel_var <- apply(chunk_data, 2, var)    # Compute temporal correlations   if (ncol(chunk_data) > 1) {     corr_matrix <- cor(chunk_data)     mean_corr <- mean(corr_matrix[upper.tri(corr_matrix)])   } else {     mean_corr <- NA   }    list(     n_voxels = ncol(chunk_data),     n_timepoints = nrow(chunk_data),     mean_variance = mean(voxel_var),     mean_correlation = mean_corr   ) }  # Apply to chunks chunks <- data_chunks(dataset, nchunks = 5) results <- list()  for (chunk in chunks) {   results[[chunk$chunk_num]] <- analyze_chunk(chunk$data) }  # Summarize results for (i in seq_along(results)) {   r <- results[[i]]   cat(     \"Chunk\", i, \": \", r$n_voxels, \"voxels, mean var =\",     round(r$mean_variance, 3), \"\\n\"   ) }"},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/fmridataset-intro.html","id":"memory-management-for-large-datasets","dir":"Articles","previous_headings":"Advanced Examples","what":"Memory Management for Large Datasets","title":"Introduction to fmridataset","text":"","code":"# For large file-based datasets, use chunking to manage memory large_dataset_analysis <- function(dataset, analysis_func, nchunks = 10) {   chunks <- data_chunks(dataset, nchunks = nchunks)   results <- list()    for (chunk in chunks) {     # Process chunk     chunk_result <- analysis_func(chunk$data)     results[[chunk$chunk_num]] <- chunk_result      # Optionally save intermediate results     # saveRDS(chunk_result, paste0(\"chunk_\", chunk$chunk_num, \".rds\"))      cat(\"Completed chunk\", chunk$chunk_num, \"/\", chunks$nchunks, \"\\n\")   }    return(results) }  # Use the function # results <- large_dataset_analysis(dataset, analyze_chunk)"},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/fmridataset-intro.html","id":"performance-tips","dir":"Articles","previous_headings":"Best Practices","what":"Performance Tips","title":"Introduction to fmridataset","text":"Use appropriate chunk sizes: Balance memory usage processing overhead Lazy loading: Keep file-based datasets files data needed Run-wise processing: Use runwise = TRUE run-specific analyses Memory monitoring: Monitor memory usage large datasets","code":"# Good: Process runs separately for run-specific analyses run_means <- list() run_chunks <- data_chunks(dataset, runwise = TRUE) for (chunk in run_chunks) {   run_means[[chunk$chunk_num]] <- colMeans(chunk$data) }  # Good: Use appropriate chunk size for memory constraints reasonable_chunks <- data_chunks(dataset, nchunks = 20)  # Caution: Converting large file datasets to matrix loads all data # matrix_version <- as.matrix_dataset(very_large_file_dataset)  # May use lots of RAM"},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/fmridataset-intro.html","id":"data-validation","dir":"Articles","previous_headings":"Best Practices","what":"Data Validation","title":"Introduction to fmridataset","text":"","code":"# Check dataset integrity validate_basic <- function(dataset) {   # Check that run lengths match data   sf <- dataset$sampling_frame   total_timepoints <- n_timepoints(sf)    if (\"datamat\" %in% names(dataset)) {     actual_timepoints <- nrow(dataset$datamat)     if (total_timepoints != actual_timepoints) {       warning(\"Mismatch between sampling frame and data dimensions\")     }   }    # Check event table   if (nrow(dataset$event_table) > 0) {     max_onset <- max(dataset$event_table$onset)     total_duration <- get_total_duration(sf)     if (max_onset > total_duration) {       warning(\"Events extend beyond scan duration\")     }   }    cat(\"Dataset validation completed\\n\") }  # validate_basic(dataset)"},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/fmridataset-intro.html","id":"reproducibility","dir":"Articles","previous_headings":"Best Practices","what":"Reproducibility","title":"Introduction to fmridataset","text":"","code":"# Document dataset creation parameters dataset_info <- list(   creation_date = Sys.time(),   r_version = R.version.string,   package_version = packageVersion(\"fmridataset\"),   dataset_type = class(dataset)[1],   n_runs = dataset$nruns,   TR = get_TR(dataset$sampling_frame),   n_timepoints = n_timepoints(dataset$sampling_frame) )  # Store with dataset or save separately # saveRDS(dataset_info, \"dataset_metadata.rds\") cat(\"Dataset info recorded for reproducibility\\n\")"},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/fmridataset-intro.html","id":"neurovec-compatibility","dir":"Articles","previous_headings":"Integration with Other Packages","what":"NeuroVec Compatibility","title":"Introduction to fmridataset","text":"","code":"# fmridataset works seamlessly with neuroim2 # File datasets return NeuroVec objects from get_data() # Memory datasets store NeuroVec objects directly  # Example: Convert matrix dataset to NeuroVec if (inherits(dataset, \"matrix_dataset\")) {   # Create a simple 3D space for demonstration   space_3d <- neuroim2::NeuroSpace(c(10, 10, 10))    # Reshape matrix data to 4D array (x, y, z, time)   # This is a simplified example - real use would preserve actual geometry   n_voxels <- ncol(dataset$datamat)   n_timepoints <- nrow(dataset$datamat)    if (n_voxels == 1000) { # Our example case     arr_4d <- array(t(dataset$datamat), c(10, 10, 10, n_timepoints))     space_4d <- neuroim2::NeuroSpace(c(10, 10, 10, n_timepoints))     nvec <- neuroim2::NeuroVec(arr_4d, space_4d)     cat(\"Created NeuroVec with dimensions:\", dim(nvec), \"\\n\")   } }"},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/fmridataset-intro.html","id":"analysis-workflows","dir":"Articles","previous_headings":"Integration with Other Packages","what":"Analysis Workflows","title":"Introduction to fmridataset","text":"","code":"# Example: Simple GLM analysis simple_glm_analysis <- function(dataset) {   # Get design matrix from events   events <- dataset$event_table   if (nrow(events) == 0) {     stop(\"No events found for GLM analysis\")   }    # Create simple design matrix (stimulus A vs B)   sf <- dataset$sampling_frame   n_timepoints <- n_timepoints(sf)   TR <- get_TR(sf)    design_matrix <- matrix(0, nrow = n_timepoints, ncol = 2)   colnames(design_matrix) <- c(\"stimulus_A\", \"stimulus_B\")    # Fill design matrix based on events   for (i in 1:nrow(events)) {     onset_tr <- round(events$onset[i] / TR) + 1     if (onset_tr <= n_timepoints) {       if (events$trial_type[i] == \"stimulus_A\") {         design_matrix[onset_tr, 1] <- 1       } else if (events$trial_type[i] == \"stimulus_B\") {         design_matrix[onset_tr, 2] <- 1       }     }   }    # Fit GLM using chunking for memory efficiency   chunks <- data_chunks(dataset, nchunks = 5)   all_betas <- list()    for (chunk in chunks) {     data_chunk <- chunk$data      # Fit GLM for each voxel in chunk     n_voxels <- ncol(data_chunk)     betas <- matrix(NA, nrow = 2, ncol = n_voxels)      for (v in 1:n_voxels) {       y <- data_chunk[, v]       fit <- lm(y ~ design_matrix - 1) # No intercept, use design matrix directly       betas[, v] <- coef(fit)     }      all_betas[[chunk$chunk_num]] <- betas   }    # Combine results   final_betas <- do.call(cbind, all_betas)   rownames(final_betas) <- colnames(design_matrix)    return(final_betas) }  # Apply analysis (if dataset has events) # if (nrow(dataset$event_table) > 0) { #   betas <- simple_glm_analysis(dataset) #   cat(\"GLM analysis completed. Beta dimensions:\", dim(betas), \"\\n\") # }"},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/fmridataset-intro.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Introduction to fmridataset","text":"fmridataset package provides clean, consistent interface working fMRI data R. Key advantages include: Unified API across different data sources (matrices, files, NeuroVec objects) Efficient memory usage lazy loading chunking Rich temporal modeling sampling frames Flexible data access patterns Integration neuroim2 ecosystem package designed simple yet powerful, providing essential functionality fMRI data management without unnecessary complexity. serves solid foundation building sophisticated analysis pipelines. detailed information specific functions, see package documentation help(package = \"fmridataset\").","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/fmridataset-intro.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Introduction to fmridataset","text":"```","code":"sessionInfo()"},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/h5-backend-usage.html","id":"h5-backend-for-fmri-data","dir":"Articles","previous_headings":"","what":"H5 Backend for fMRI Data","title":"Using the H5 Backend for Efficient fMRI Data Storage","text":"fmridataset package supports efficient storage access fMRI data using HDF5 files integration fmristore package. scan stored H5 file loads H5NeuroVec object, providing memory-efficient access large neuroimaging datasets.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/h5-backend-usage.html","id":"prerequisites","dir":"Articles","previous_headings":"H5 Backend for fMRI Data","what":"Prerequisites","title":"Using the H5 Backend for Efficient fMRI Data Storage","text":"use H5 backend, need install fmristore package: also need following dependencies: - neuroim2 neuroimaging data structures - hdf5r HDF5 file operations","code":"# Install from GitHub devtools::install_github(\"bbuchsbaum/fmristore\")"},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/h5-backend-usage.html","id":"creating-an-fmri-dataset-from-h5-files","dir":"Articles","previous_headings":"H5 Backend for fMRI Data > Basic Usage","what":"Creating an fMRI Dataset from H5 Files","title":"Using the H5 Backend for Efficient fMRI Data Storage","text":"","code":"library(fmridataset)  # Create an fMRI dataset from H5 files dset <- fmri_h5_dataset(   h5_files = c(\"scan1.h5\", \"scan2.h5\", \"scan3.h5\"),   mask_source = \"mask.h5\",  # Can also be a regular .nii file   TR = 2.0,   run_length = c(150, 150, 150) )  # The dataset behaves like any other fmri_dataset print(dset)"},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/h5-backend-usage.html","id":"using-a-pre-created-h5-backend","dir":"Articles","previous_headings":"H5 Backend for fMRI Data > Basic Usage","what":"Using a Pre-created H5 Backend","title":"Using the H5 Backend for Efficient fMRI Data Storage","text":"control, can create H5 backend directly:","code":"# Create H5 backend backend <- h5_backend(   source = c(\"functional_run1.h5\", \"functional_run2.h5\"),   mask_source = \"brain_mask.h5\",   data_dataset = \"data/elements\",  # HDF5 dataset path for data   mask_dataset = \"data/elements\",  # HDF5 dataset path for mask   preload = FALSE  # Load data on-demand rather than eagerly )  # Create dataset using the backend dset <- fmri_dataset(   scans = backend,   TR = 2.5,   run_length = c(200, 200),   event_table = my_events )"},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/h5-backend-usage.html","id":"h5-file-structure","dir":"Articles","previous_headings":"H5 Backend for fMRI Data","what":"H5 File Structure","title":"Using the H5 Backend for Efficient fMRI Data Storage","text":"H5 backend expects HDF5 files following structure (compatible fmristore): mask files:","code":"/ ├── space/ │   ├── dim          # Spatial dimensions [x, y, z, t] │   ├── origin       # Volume origin coordinates │   └── trans        # Transformation matrix └── data/     └── elements     # 4D fMRI data array / ├── space/ │   ├── dim          # Spatial dimensions [x, y, z] │   ├── origin       # Volume origin coordinates │   └── trans        # Transformation matrix └── data/     └── elements     # 3D mask array"},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/h5-backend-usage.html","id":"advantages-of-h5-backend","dir":"Articles","previous_headings":"H5 Backend for fMRI Data","what":"Advantages of H5 Backend","title":"Using the H5 Backend for Efficient fMRI Data Storage","text":"Memory Efficiency: Data loaded -demand, reducing memory usage large datasets Fast Access: HDF5 provides efficient random access data subsets Compression: Built-compression reduces storage requirements Cross-platform: HDF5 files work across different operating systems Metadata Storage: Rich metadata can stored alongside data","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/h5-backend-usage.html","id":"working-with-large-datasets","dir":"Articles","previous_headings":"H5 Backend for fMRI Data","what":"Working with Large Datasets","title":"Using the H5 Backend for Efficient fMRI Data Storage","text":"H5 backend particularly useful large datasets:","code":"# For very large datasets, use preload=FALSE (default) large_backend <- h5_backend(   source = paste0(\"scan_\", 1:20, \".h5\"),  # 20 scans   mask_source = \"mask.h5\",   preload = FALSE  # Data loaded only when accessed )  # Create dataset large_dset <- fmri_dataset(   scans = large_backend,   TR = 2.0,   run_length = rep(300, 20)  # 20 runs of 300 timepoints each )  # Data is loaded on-demand when you access it data_matrix <- get_data_matrix(large_dset)"},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/h5-backend-usage.html","id":"converting-existing-data-to-h5-format","dir":"Articles","previous_headings":"H5 Backend for fMRI Data","what":"Converting Existing Data to H5 Format","title":"Using the H5 Backend for Efficient fMRI Data Storage","text":"existing NIfTI data, can convert H5 format using fmristore:","code":"# This would be done outside of fmridataset, using fmristore directly library(fmristore) library(neuroim2)  # Load NIfTI data nvec <- read_vec(\"functional.nii\")  # Convert to H5 format h5_file <- as_h5(nvec, file = \"functional.h5\", data_type = \"FLOAT\", compression = 6)  # Now you can use it with the H5 backend dset <- fmri_h5_dataset(\"functional.h5\", \"mask.nii\", TR = 2.0, run_length = 300)"},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/h5-backend-usage.html","id":"performance-considerations","dir":"Articles","previous_headings":"H5 Backend for fMRI Data","what":"Performance Considerations","title":"Using the H5 Backend for Efficient fMRI Data Storage","text":"Use preload = TRUE small datasets fit memory Use preload = FALSE (default) large datasets H5 files benefit compression - use compression levels 4-6 good balance speed/size optimal performance, ensure H5 files stored fast storage (SSD)","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/h5-backend-usage.html","id":"error-handling","dir":"Articles","previous_headings":"H5 Backend for fMRI Data","what":"Error Handling","title":"Using the H5 Backend for Efficient fMRI Data Storage","text":"H5 backend provides informative error messages:","code":"# File not found try(h5_backend(\"nonexistent.h5\", \"mask.h5\"))  # Invalid object types try(h5_backend(list(\"not_an_h5neurovec\"), \"mask.h5\"))  # Missing fmristore package # (Error shown if fmristore is not installed)"},{"path":"https://bbuchsbaum.github.io/fmridataset/articles/h5-backend-usage.html","id":"integration-with-existing-workflows","dir":"Articles","previous_headings":"H5 Backend for fMRI Data","what":"Integration with Existing Workflows","title":"Using the H5 Backend for Efficient fMRI Data Storage","text":"H5 backend integrates seamlessly existing fmridataset workflows: H5 backend provides efficient way work large fMRI datasets maintaining familiar fmridataset interface.","code":"# All standard operations work the same way mask <- get_mask(dset) data <- get_data_matrix(dset) sampling_frame <- get_sampling_frame(dset)  # Data chunking works efficiently with H5 backend chunks <- data_chunks(dset, nchunks = 4)"},{"path":"https://bbuchsbaum.github.io/fmridataset/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bradley Buchsbaum. Author, maintainer.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Buchsbaum B (2025). fmridataset: Unified Container fMRI Datasets. R package version 0.1.0, https://github.com/bbuchsbaum/fmridataset.","code":"@Manual{,   title = {fmridataset: Unified Container for fMRI Datasets},   author = {Bradley Buchsbaum},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/bbuchsbaum/fmridataset}, }"},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmridataset/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Unified Container for fMRI Datasets","text":"fmridataset provides unified S3 class representing functional magnetic resonance imaging (fMRI) data various sources. package supports multiple data backends offers consistent interface working fMRI datasets regardless underlying storage format.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Unified Container for fMRI Datasets","text":"Unified Interface: Work fMRI data NIfTI files, BIDS projects, pre-loaded NeuroVec objects, -memory matrices single API Lazy Loading: Efficient memory management -demand data loading Flexible Backends: Pluggable storage backends different data formats Data Chunking: Built-support processing large datasets chunks Temporal Structure: Rich sampling frame representation run lengths, TR, temporal organization Integration Ready: Seamlessly integrates neuroimaging analysis workflows","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Unified Container for fMRI Datasets","text":"can install development version fmridataset GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"bbuchsbaum/fmridataset\")"},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmridataset/index.html","id":"creating-datasets","dir":"","previous_headings":"Quick Start","what":"Creating Datasets","title":"Unified Container for fMRI Datasets","text":"","code":"library(fmridataset)  # From NIfTI files dataset <- fmri_dataset(   scans = c(\"run1.nii\", \"run2.nii\"),   mask = \"mask.nii\",    TR = 2.0,   run_length = c(240, 240) )  # From in-memory matrix mat_data <- matrix(rnorm(1000), nrow = 100, ncol = 10) dataset <- matrix_dataset(   datamat = mat_data,   TR = 1.5,    run_length = 100 )  # From pre-loaded NeuroVec objects   dataset <- fmri_mem_dataset(   scans = list(neurovec1, neurovec2),   mask = mask_vol,   TR = 2.0 )"},{"path":"https://bbuchsbaum.github.io/fmridataset/index.html","id":"data-access","dir":"","previous_headings":"Quick Start","what":"Data Access","title":"Unified Container for fMRI Datasets","text":"","code":"# Get full data matrix data_matrix <- get_data_matrix(dataset)  # Get spatial mask mask <- get_mask(dataset)  # Access temporal properties n_timepoints(dataset$sampling_frame) n_runs(dataset$sampling_frame) get_TR(dataset$sampling_frame)"},{"path":"https://bbuchsbaum.github.io/fmridataset/index.html","id":"data-chunking","dir":"","previous_headings":"Quick Start","what":"Data Chunking","title":"Unified Container for fMRI Datasets","text":"","code":"# Process data in chunks chunks <- data_chunks(dataset, nchunks = 5) for (i in 1:5) {   chunk <- chunks$nextElem()   # Process chunk$data, chunk$voxel_ind, etc. }  # Run-wise processing run_chunks <- data_chunks(dataset, runwise = TRUE) run1_data <- run_chunks$nextElem()"},{"path":"https://bbuchsbaum.github.io/fmridataset/index.html","id":"type-conversions","dir":"","previous_headings":"Quick Start","what":"Type Conversions","title":"Unified Container for fMRI Datasets","text":"","code":"# Convert to matrix format mat_dataset <- as.matrix_dataset(dataset)  # All dataset types support the same interface print(dataset) summary(dataset$sampling_frame)"},{"path":"https://bbuchsbaum.github.io/fmridataset/index.html","id":"architecture","dir":"","previous_headings":"","what":"Architecture","title":"Unified Container for fMRI Datasets","text":"package uses modular architecture following key components: Storage Backends: Pluggable data access layer (matrix_backend, nifti_backend) Dataset Constructors: High-level dataset creation functions Sampling Frames: Temporal structure representation Data Access Methods: Consistent interface data retrieval Chunking System: Efficient processing large datasets","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/index.html","id":"related-packages","dir":"","previous_headings":"","what":"Related Packages","title":"Unified Container for fMRI Datasets","text":"neuroim2: Neuroimaging data structures fmristore: Advanced fMRI data storage bidser: BIDS dataset utilities","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting Help","title":"Unified Container for fMRI Datasets","text":"Check package documentation detailed guides Report bugs request features GitHub Issues See vignettes detailed examples","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Unified Container for fMRI Datasets","text":"Contributions welcome! Please see Contributing Guide details.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Unified Container for fMRI Datasets","text":"GPL (>= 3)","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/as.matrix_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to Matrix Dataset — as.matrix_dataset","title":"Convert to Matrix Dataset — as.matrix_dataset","text":"Generic function convert various fMRI dataset types matrix_dataset objects. Provides unified interface getting matrix-based representations.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/as.matrix_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to Matrix Dataset — as.matrix_dataset","text":"","code":"as.matrix_dataset(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/as.matrix_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to Matrix Dataset — as.matrix_dataset","text":"x fMRI dataset object ... Additional arguments passed methods","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/as.matrix_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to Matrix Dataset — as.matrix_dataset","text":"matrix_dataset object","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/backend_close.html","id":null,"dir":"Reference","previous_headings":"","what":"Close a Storage Backend — backend_close","title":"Close a Storage Backend — backend_close","text":"Closes storage backend releases resources. Stateless backends can implement -op.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/backend_close.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Close a Storage Backend — backend_close","text":"","code":"backend_close(backend)"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/backend_close.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Close a Storage Backend — backend_close","text":"backend storage backend object","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/backend_close.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Close a Storage Backend — backend_close","text":"NULL (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/backend_get_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Data from Backend — backend_get_data","title":"Get Data from Backend — backend_get_data","text":"Reads data backend canonical timepoints × voxels orientation.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/backend_get_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Data from Backend — backend_get_data","text":"","code":"backend_get_data(backend, rows = NULL, cols = NULL)"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/backend_get_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Data from Backend — backend_get_data","text":"backend storage backend object rows Integer vector row indices (timepoints) read, NULL cols Integer vector column indices (voxels) read, NULL ","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/backend_get_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Data from Backend — backend_get_data","text":"matrix timepoints × voxels orientation","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/backend_get_dims.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Dimensions from Backend — backend_get_dims","title":"Get Dimensions from Backend — backend_get_dims","text":"Returns dimensions data stored backend.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/backend_get_dims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Dimensions from Backend — backend_get_dims","text":"","code":"backend_get_dims(backend)"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/backend_get_dims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Dimensions from Backend — backend_get_dims","text":"backend storage backend object","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/backend_get_dims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Dimensions from Backend — backend_get_dims","text":"named list elements: spatial: numeric vector length 3 (x, y, z dimensions) time: integer, number timepoints","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/backend_get_mask.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Mask from Backend — backend_get_mask","title":"Get Mask from Backend — backend_get_mask","text":"Returns logical mask indicating voxels contain valid data.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/backend_get_mask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Mask from Backend — backend_get_mask","text":"","code":"backend_get_mask(backend)"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/backend_get_mask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Mask from Backend — backend_get_mask","text":"backend storage backend object","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/backend_get_mask.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Mask from Backend — backend_get_mask","text":"logical vector satisfying: length(mask) == prod(backend_get_dims(backend)$spatial) sum(mask) > 0 (empty masks allowed) NA values allowed","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/backend_get_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Metadata from Backend — backend_get_metadata","title":"Get Metadata from Backend — backend_get_metadata","text":"Returns metadata associated data (e.g., affine matrix, voxel dimensions).","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/backend_get_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Metadata from Backend — backend_get_metadata","text":"","code":"backend_get_metadata(backend)"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/backend_get_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Metadata from Backend — backend_get_metadata","text":"backend storage backend object","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/backend_get_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Metadata from Backend — backend_get_metadata","text":"list containing neuroimaging metadata, may include: affine: 4x4 affine transformation matrix voxel_dims: numeric vector voxel dimensions intent_code: NIfTI intent code Additional format-specific metadata","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/backend_open.html","id":null,"dir":"Reference","previous_headings":"","what":"Open a Storage Backend — backend_open","title":"Open a Storage Backend — backend_open","text":"Opens storage backend acquires necessary resources (e.g., file handles). Stateless backends can implement -op.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/backend_open.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open a Storage Backend — backend_open","text":"","code":"backend_open(backend)"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/backend_open.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open a Storage Backend — backend_open","text":"backend storage backend object","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/backend_open.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open a Storage Backend — backend_open","text":"backend object (possibly modified state)","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/blockids.html","id":null,"dir":"Reference","previous_headings":"","what":"Get block IDs from sampling frame — blockids","title":"Get block IDs from sampling frame — blockids","text":"Get block IDs sampling frame","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/blockids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get block IDs from sampling frame — blockids","text":"","code":"blockids(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/blockids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get block IDs from sampling frame — blockids","text":"x Sampling frame object ... Additional arguments","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/blocklens.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Block Lengths from Objects — blocklens","title":"Get Block Lengths from Objects — blocklens","text":"Generic function extract block/run lengths various objects. Extends sampling_frame generic work dataset objects.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/blocklens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Block Lengths from Objects — blocklens","text":"","code":"blocklens(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/blocklens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Block Lengths from Objects — blocklens","text":"x object block structure ... Additional arguments passed methods","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/blocklens.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Block Lengths from Objects — blocklens","text":"Integer vector block/run lengths","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/data_chunks.fmri_mem_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Data Chunks for fmri_mem_dataset Objects — data_chunks.fmri_mem_dataset","title":"Create Data Chunks for fmri_mem_dataset Objects — data_chunks.fmri_mem_dataset","text":"function creates data chunks fmri_mem_dataset objects. allows retrieval run-wise sequence-wise data chunks, well arbitrary chunks.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/data_chunks.fmri_mem_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Data Chunks for fmri_mem_dataset Objects — data_chunks.fmri_mem_dataset","text":"","code":"# S3 method for class 'fmri_mem_dataset' data_chunks(x, nchunks = 1, runwise = FALSE, ...)"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/data_chunks.fmri_mem_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Data Chunks for fmri_mem_dataset Objects — data_chunks.fmri_mem_dataset","text":"x object class 'fmri_mem_dataset'. nchunks number data chunks create. Default 1. runwise TRUE, data chunks created run-wise. Default FALSE. ... Additional arguments.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/data_chunks.fmri_mem_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Data Chunks for fmri_mem_dataset Objects — data_chunks.fmri_mem_dataset","text":"list data chunks, chunk containing data, voxel indices, row indices, chunk number.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/data_chunks.fmri_mem_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Data Chunks for fmri_mem_dataset Objects — data_chunks.fmri_mem_dataset","text":"","code":"if (FALSE) { # \\dontrun{ # Create a simple fmri_mem_dataset for demonstration d <- c(10, 10, 10, 10) nvec <- neuroim2::NeuroVec(array(rnorm(prod(d)), d), space=neuroim2::NeuroSpace(d)) mask <- neuroim2::LogicalNeuroVol(array(TRUE, d[1:3]), neuroim2::NeuroSpace(d[1:3])) dset <- fmri_mem_dataset(list(nvec), mask, TR=2)  # Create an iterator with 5 chunks iter <- data_chunks(dset, nchunks=5) `%do%` <- foreach::`%do%` y <- foreach::foreach(chunk = iter) %do% { colMeans(chunk$data) } length(y) == 5  # Create an iterator with 100 chunks iter <- data_chunks(dset, nchunks=100) y <- foreach::foreach(chunk = iter) %do% { colMeans(chunk$data) } length(y) == 100  # Create a \"runwise\" iterator iter <- data_chunks(dset, runwise=TRUE) y <- foreach::foreach(chunk = iter) %do% { colMeans(chunk$data) } length(y) == 1 } # }"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/data_chunks.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Data Chunks for Processing — data_chunks","title":"Create Data Chunks for Processing — data_chunks","text":"Generic function create data chunks parallel processing various fMRI dataset types. Supports different chunking strategies.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/data_chunks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Data Chunks for Processing — data_chunks","text":"","code":"data_chunks(x, nchunks = 1, runwise = FALSE, ...)"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/data_chunks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Data Chunks for Processing — data_chunks","text":"x fMRI dataset object nchunks Number chunks create (default: 1) runwise TRUE, create run-wise chunks (default: FALSE) ... Additional arguments passed methods","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/data_chunks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Data Chunks for Processing — data_chunks","text":"chunk iterator object","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/data_chunks.matrix_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Data Chunks for matrix_dataset Objects — data_chunks.matrix_dataset","title":"Create Data Chunks for matrix_dataset Objects — data_chunks.matrix_dataset","text":"function creates data chunks matrix_dataset objects. allows retrieval run-wise sequence-wise data chunks, well arbitrary chunks.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/data_chunks.matrix_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Data Chunks for matrix_dataset Objects — data_chunks.matrix_dataset","text":"","code":"# S3 method for class 'matrix_dataset' data_chunks(x, nchunks = 1, runwise = FALSE, ...)"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/data_chunks.matrix_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Data Chunks for matrix_dataset Objects — data_chunks.matrix_dataset","text":"x object class 'matrix_dataset' nchunks number chunks split data . Default 1. runwise TRUE, creates run-wise chunks instead arbitrary chunks ... Additional arguments passed methods","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/data_chunks.matrix_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Data Chunks for matrix_dataset Objects — data_chunks.matrix_dataset","text":"list data chunks, containing data, indices chunk number","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/fmri_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an fMRI Dataset Object from a Set of Scans — fmri_dataset","title":"Create an fMRI Dataset Object from a Set of Scans — fmri_dataset","text":"function creates fMRI dataset object set scans, design information, data. new implementation uses pluggable backend architecture.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/fmri_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an fMRI Dataset Object from a Set of Scans — fmri_dataset","text":"","code":"fmri_dataset(   scans,   mask = NULL,   TR,   run_length,   event_table = data.frame(),   base_path = \".\",   censor = NULL,   preload = FALSE,   mode = c(\"normal\", \"bigvec\", \"mmap\", \"filebacked\"),   backend = NULL )"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/fmri_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an fMRI Dataset Object from a Set of Scans — fmri_dataset","text":"scans vector one file names images comprising dataset, pre-created storage backend object. mask Name binary mask file indicating voxels include analysis. Ignored scans backend object. TR repetition time seconds scan--scan interval. run_length vector one integers indicating number scans run. event_table data.frame containing event onsets experimental variables. Default empty data.frame. base_path file path prepended relative file names. Default \".\" (current directory). censor binary vector indicating scans remove. Default NULL. preload Read image scans eagerly rather first access. Default FALSE. mode type storage mode ('normal', 'bigvec', 'mmap', filebacked'). Default 'normal'. Ignored scans backend object. backend Deprecated. Use scans parameter pass backend object.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/fmri_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an fMRI Dataset Object from a Set of Scans — fmri_dataset","text":"fMRI dataset object class c(\"fmri_file_dataset\", \"volumetric_dataset\", \"fmri_dataset\", \"list\").","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/fmri_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an fMRI Dataset Object from a Set of Scans — fmri_dataset","text":"","code":"if (FALSE) { # \\dontrun{ # Create an fMRI dataset with 3 scans and a mask dset <- fmri_dataset(c(\"scan1.nii\", \"scan2.nii\", \"scan3.nii\"),    mask=\"mask.nii\", TR=2, run_length=rep(300, 3),    event_table=data.frame(onsets=c(3, 20, 99, 3, 20, 99, 3, 20, 99),    run=c(1, 1, 1, 2, 2, 2, 3, 3, 3)) )  # Create an fMRI dataset with 1 scan and a mask dset <- fmri_dataset(\"scan1.nii\", mask=\"mask.nii\", TR=2,    run_length=300,    event_table=data.frame(onsets=c(3, 20, 99), run=rep(1, 3)) )  # Create an fMRI dataset with a backend backend <- nifti_backend(c(\"scan1.nii\", \"scan2.nii\"), mask_source=\"mask.nii\") dset <- fmri_dataset(backend, TR=2, run_length=c(150, 150)) } # }"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/fmri_dataset_legacy.html","id":null,"dir":"Reference","previous_headings":"","what":"Legacy fMRI Dataset Implementation — fmri_dataset_legacy","title":"Legacy fMRI Dataset Implementation — fmri_dataset_legacy","text":"file contains original fmri_file_dataset implementation, preserved backwards compatibility testing transition new backend architecture.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/fmri_h5_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an fMRI Dataset Object from H5 Files — fmri_h5_dataset","title":"Create an fMRI Dataset Object from H5 Files — fmri_h5_dataset","text":"function creates fMRI dataset object specifically H5 files using fmristore package. scan stored H5 file loads H5NeuroVec object.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/fmri_h5_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an fMRI Dataset Object from H5 Files — fmri_h5_dataset","text":"","code":"fmri_h5_dataset(   h5_files,   mask_source,   TR,   run_length,   event_table = data.frame(),   base_path = \".\",   censor = NULL,   preload = FALSE,   mask_dataset = \"data/elements\",   data_dataset = \"data/elements\" )"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/fmri_h5_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an fMRI Dataset Object from H5 Files — fmri_h5_dataset","text":"h5_files vector one file paths H5 files containing fMRI data. mask_source File path H5 mask file, regular mask file, -memory NeuroVol object. TR repetition time seconds scan--scan interval. run_length vector one integers indicating number scans run. event_table data.frame containing event onsets experimental variables. Default empty data.frame. base_path file path prepended relative file names. Default \".\" (current directory). censor binary vector indicating scans remove. Default NULL. preload Read H5NeuroVec objects eagerly rather first access. Default FALSE. mask_dataset Character string specifying dataset path within H5 file mask (default: \"data/elements\"). data_dataset Character string specifying dataset path within H5 files data (default: \"data/elements\").","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/fmri_h5_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an fMRI Dataset Object from H5 Files — fmri_h5_dataset","text":"fMRI dataset object class c(\"fmri_file_dataset\", \"volumetric_dataset\", \"fmri_dataset\", \"list\").","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/fmri_h5_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an fMRI Dataset Object from H5 Files — fmri_h5_dataset","text":"","code":"if (FALSE) { # \\dontrun{ # Create an fMRI dataset with H5 files dset <- fmri_h5_dataset(   h5_files = c(\"scan1.h5\", \"scan2.h5\", \"scan3.h5\"),    mask_source = \"mask.h5\",    TR = 2,    run_length = c(150, 150, 150) )  # Create an fMRI dataset with H5 files and regular mask dset <- fmri_h5_dataset(   h5_files = \"single_scan.h5\",    mask_source = \"mask.nii\",    TR = 2,    run_length = 300 ) } # }"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/fmri_mem_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an fMRI Memory Dataset Object — fmri_mem_dataset","title":"Create an fMRI Memory Dataset Object — fmri_mem_dataset","text":"function creates fMRI memory dataset object, list containing information scans, mask, TR, number runs, event table, base path, sampling frame, censor.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/fmri_mem_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an fMRI Memory Dataset Object — fmri_mem_dataset","text":"","code":"fmri_mem_dataset(   scans,   mask,   TR,   run_length = sapply(scans, function(x) dim(x)[4]),   event_table = data.frame(),   base_path = \".\",   censor = NULL )"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/fmri_mem_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an fMRI Memory Dataset Object — fmri_mem_dataset","text":"scans list objects class NeuroVec neuroim2 package. mask binary mask class NeuroVol neuroim2 package indicating set voxels include analyses. TR Repetition time (TR) fMRI acquisition. run_length numeric vector specifying length run dataset. Default length scans. event_table optional data frame containing event information. Default empty data frame. base_path optional base path dataset. Default \".\" (current directory). censor optional numeric vector specifying time points censor. Default NULL.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/fmri_mem_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an fMRI Memory Dataset Object — fmri_mem_dataset","text":"fMRI memory dataset object class c(\"fmri_mem_dataset\", \"volumetric_dataset\", \"fmri_dataset\", \"list\").","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/fmri_mem_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an fMRI Memory Dataset Object — fmri_mem_dataset","text":"","code":"# Create a NeuroVec object d <- c(10, 10, 10, 10) nvec <- neuroim2::NeuroVec(array(rnorm(prod(d)), d), space=neuroim2::NeuroSpace(d))  # Create a NeuroVol mask mask <- neuroim2::NeuroVol(array(rnorm(10*10*10), d[1:3]), space=neuroim2::NeuroSpace(d[1:3])) mask[mask < .5] <- 0  # Create an fmri_mem_dataset dset <- fmri_mem_dataset(list(nvec), mask, TR=2)"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/fmridataset-errors.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom Error Classes for fmridataset — fmridataset-errors","title":"Custom Error Classes for fmridataset — fmridataset-errors","text":"hierarchy custom S3 error classes fmridataset package. provide structured error handling storage backend operations.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/fmridataset_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Custom fmridataset Error — fmridataset_error","title":"Create a Custom fmridataset Error — fmridataset_error","text":"Create Custom fmridataset Error","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/fmridataset_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Custom fmridataset Error — fmridataset_error","text":"","code":"fmridataset_error(message, class = character(), ...)"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/fmridataset_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Custom fmridataset Error — fmridataset_error","text":"message Character string describing error class Character vector error classes ... Additional data include error condition","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/fmridataset_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Custom fmridataset Error — fmridataset_error","text":"condition object","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/fmridataset_error_backend_io.html","id":null,"dir":"Reference","previous_headings":"","what":"Backend I/O Error — fmridataset_error_backend_io","title":"Backend I/O Error — fmridataset_error_backend_io","text":"Raised storage backend encounters read/write failures.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/fmridataset_error_backend_io.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Backend I/O Error — fmridataset_error_backend_io","text":"","code":"fmridataset_error_backend_io(message, file = NULL, operation = NULL, ...)"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/fmridataset_error_backend_io.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Backend I/O Error — fmridataset_error_backend_io","text":"message Character string describing /O error file Path file caused error (optional) operation operation failed (e.g., \"read\", \"write\") ... Additional context","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/fmridataset_error_backend_io.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Backend I/O Error — fmridataset_error_backend_io","text":"backend /O error condition","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/fmridataset_error_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Configuration Error — fmridataset_error_config","title":"Configuration Error — fmridataset_error_config","text":"Raised invalid configuration provided backend dataset.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/fmridataset_error_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configuration Error — fmridataset_error_config","text":"","code":"fmridataset_error_config(message, parameter = NULL, value = NULL, ...)"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/fmridataset_error_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configuration Error — fmridataset_error_config","text":"message Character string describing configuration error parameter parameter invalid value invalid value provided ... Additional context","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/fmridataset_error_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configuration Error — fmridataset_error_config","text":"configuration error condition","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/generics.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic Functions for fMRI Dataset Operations — generics","title":"Generic Functions for fMRI Dataset Operations — generics","text":"file contains generic function declarations refactored fmridataset package. establish interface contracts implemented dataset-specific methods files.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/get_TR.html","id":null,"dir":"Reference","previous_headings":"","what":"Get TR from sampling frame — get_TR","title":"Get TR from sampling frame — get_TR","text":"Get TR sampling frame","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/get_TR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get TR from sampling frame — get_TR","text":"","code":"get_TR(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/get_TR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get TR from sampling frame — get_TR","text":"x Sampling frame object ... Additional arguments","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/get_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Data from fMRI Dataset Objects — get_data","title":"Get Data from fMRI Dataset Objects — get_data","text":"Generic function extract data various fMRI dataset types. Returns underlying data native format (NeuroVec, matrix, etc.).","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/get_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Data from fMRI Dataset Objects — get_data","text":"","code":"get_data(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/get_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Data from fMRI Dataset Objects — get_data","text":"x fMRI dataset object ... Additional arguments passed methods","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/get_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Data from fMRI Dataset Objects — get_data","text":"Dataset-specific data object","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/get_data_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Data Matrix from fMRI Dataset Objects — get_data_matrix","title":"Get Data Matrix from fMRI Dataset Objects — get_data_matrix","text":"Generic function extract data matrix various fMRI dataset types. Always returns matrix timepoints rows voxels columns.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/get_data_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Data Matrix from fMRI Dataset Objects — get_data_matrix","text":"","code":"get_data_matrix(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/get_data_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Data Matrix from fMRI Dataset Objects — get_data_matrix","text":"x fMRI dataset object ... Additional arguments passed methods","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/get_data_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Data Matrix from fMRI Dataset Objects — get_data_matrix","text":"matrix timepoints rows voxels columns","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/get_mask.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Mask from fMRI Dataset Objects — get_mask","title":"Get Mask from fMRI Dataset Objects — get_mask","text":"Generic function extract masks various fMRI dataset types. Returns mask appropriate format dataset type.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/get_mask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Mask from fMRI Dataset Objects — get_mask","text":"","code":"get_mask(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/get_mask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Mask from fMRI Dataset Objects — get_mask","text":"x fMRI dataset object ... Additional arguments passed methods","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/get_mask.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Mask from fMRI Dataset Objects — get_mask","text":"Mask object (NeuroVol, vector, etc.)","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/get_run_duration.html","id":null,"dir":"Reference","previous_headings":"","what":"Get run duration from sampling frame — get_run_duration","title":"Get run duration from sampling frame — get_run_duration","text":"Get run duration sampling frame","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/get_run_duration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get run duration from sampling frame — get_run_duration","text":"","code":"get_run_duration(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/get_run_duration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get run duration from sampling frame — get_run_duration","text":"x Sampling frame object ... Additional arguments","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/get_run_lengths.html","id":null,"dir":"Reference","previous_headings":"","what":"Get run lengths from sampling frame — get_run_lengths","title":"Get run lengths from sampling frame — get_run_lengths","text":"Get run lengths sampling frame","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/get_run_lengths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get run lengths from sampling frame — get_run_lengths","text":"","code":"get_run_lengths(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/get_run_lengths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get run lengths from sampling frame — get_run_lengths","text":"x Sampling frame object ... Additional arguments","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/get_total_duration.html","id":null,"dir":"Reference","previous_headings":"","what":"Get total duration from sampling frame — get_total_duration","title":"Get total duration from sampling frame — get_total_duration","text":"Get total duration sampling frame","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/get_total_duration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get total duration from sampling frame — get_total_duration","text":"","code":"get_total_duration(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/get_total_duration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get total duration from sampling frame — get_total_duration","text":"x Sampling frame object ... Additional arguments","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/global_onsets.html","id":null,"dir":"Reference","previous_headings":"","what":"Get global onsets from sampling frame — global_onsets","title":"Get global onsets from sampling frame — global_onsets","text":"Get global onsets sampling frame","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/global_onsets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get global onsets from sampling frame — global_onsets","text":"","code":"global_onsets(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/global_onsets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get global onsets from sampling frame — global_onsets","text":"x Sampling frame object ... Additional arguments","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/h5-backend.html","id":null,"dir":"Reference","previous_headings":"","what":"H5 Storage Backend — h5-backend","title":"H5 Storage Backend — h5-backend","text":"storage backend implementation H5 format neuroimaging data using fmristore. scan stored H5 file loads H5NeuroVec object.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/h5-backend.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"H5 Storage Backend — h5-backend","text":"H5Backend integrates fmristore package work : File paths H5 neuroimaging files Pre-loaded H5NeuroVec objects fmristore Multiple H5 files representing different scans","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/h5_backend.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an H5 Backend — h5_backend","title":"Create an H5 Backend — h5_backend","text":"Create H5 Backend","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/h5_backend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an H5 Backend — h5_backend","text":"","code":"h5_backend(   source,   mask_source,   mask_dataset = \"data/elements\",   data_dataset = \"data/elements\",   preload = FALSE )"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/h5_backend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an H5 Backend — h5_backend","text":"source Character vector file paths H5 files list H5NeuroVec objects mask_source File path H5 mask file, H5 file containing mask, -memory NeuroVol object mask_dataset Character string specifying dataset path within H5 file mask (default: \"data/elements\") data_dataset Character string specifying dataset path within H5 files data (default: \"data/elements\") preload Logical, whether eagerly load H5NeuroVec objects memory","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/h5_backend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an H5 Backend — h5_backend","text":"h5_backend S3 object","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/is.sampling_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if Object is a Sampling Frame — is.sampling_frame","title":"Test if Object is a Sampling Frame — is.sampling_frame","text":"function tests whether object class 'sampling_frame'.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/is.sampling_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if Object is a Sampling Frame — is.sampling_frame","text":"","code":"is.sampling_frame(x)"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/is.sampling_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if Object is a Sampling Frame — is.sampling_frame","text":"x object test","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/is.sampling_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if Object is a Sampling Frame — is.sampling_frame","text":"TRUE x sampling_frame object, FALSE otherwise","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/latent_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Latent Dataset Object — latent_dataset","title":"Create a Latent Dataset Object — latent_dataset","text":"function creates latent dataset object, encapsulates dimension-reduced subspace \"latent variables\". dataset list containing information latent neuroimaging vector, TR, number runs, event table, base path, sampling frame, censor.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/latent_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Latent Dataset Object — latent_dataset","text":"","code":"latent_dataset(lvec, TR, run_length, event_table = data.frame())"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/latent_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Latent Dataset Object — latent_dataset","text":"lvec instance class LatentNeuroVec. (Typically, LatentNeuroVec created using fmristore package.) TR Repetition time (TR) fMRI acquisition. run_length numeric vector specifying length run dataset. event_table optional data frame containing event information. Default empty data frame.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/latent_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Latent Dataset Object — latent_dataset","text":"latent dataset object class c(\"latent_dataset\", \"matrix_dataset\", \"fmri_dataset\", \"list\").","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/latent_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Latent Dataset Object — latent_dataset","text":"","code":"if (FALSE) { # \\dontrun{ # Create a matrix with 100 rows and 1000 columns (voxels) X <- matrix(rnorm(100 * 1000), 100, 1000) pres <- prcomp(X) basis <- pres$x[, 1:25] loadings <- pres$rotation[, 1:25] offset <- colMeans(X)  # Create a LatentNeuroVec object (requires the fmristore package) lvec <- fmristore::LatentNeuroVec(basis, loadings,             neuroim2::NeuroSpace(c(10, 10, 10, 100)),             mask = rep(TRUE, 1000), offset = offset)  # Create a latent_dataset dset <- latent_dataset(lvec, TR = 2, run_length = 100) } # }"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/matrix-backend.html","id":null,"dir":"Reference","previous_headings":"","what":"Matrix Storage Backend — matrix-backend","title":"Matrix Storage Backend — matrix-backend","text":"storage backend implementation -memory matrix data. backend wraps existing matrix data storage backend interface.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/matrix_backend.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Matrix Backend — matrix_backend","title":"Create a Matrix Backend — matrix_backend","text":"Create Matrix Backend","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/matrix_backend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Matrix Backend — matrix_backend","text":"","code":"matrix_backend(data_matrix, mask = NULL, spatial_dims = NULL, metadata = NULL)"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/matrix_backend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Matrix Backend — matrix_backend","text":"data_matrix matrix timepoints × voxels orientation mask Logical vector indicating voxels valid spatial_dims Numeric vector length 3 specifying spatial dimensions metadata Optional list metadata","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/matrix_backend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Matrix Backend — matrix_backend","text":"matrix_backend S3 object","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/matrix_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Matrix Dataset Constructor — matrix_dataset","title":"Matrix Dataset Constructor — matrix_dataset","text":"function creates matrix dataset object, list containing information data matrix, TR, number runs, event table, sampling frame, mask.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/matrix_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matrix Dataset Constructor — matrix_dataset","text":"","code":"matrix_dataset(datamat, TR, run_length, event_table = data.frame())"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/matrix_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matrix Dataset Constructor — matrix_dataset","text":"datamat matrix column voxel time-series. TR Repetition time (TR) fMRI acquisition. run_length numeric vector specifying length run dataset. event_table optional data frame containing event information. Default empty data frame.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/matrix_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Matrix Dataset Constructor — matrix_dataset","text":"matrix dataset object class c(\"matrix_dataset\", \"fmri_dataset\", \"list\").","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/matrix_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Matrix Dataset Constructor — matrix_dataset","text":"","code":"# A matrix with 100 rows and 100 columns (voxels) X <- matrix(rnorm(100*100), 100, 100) dset <- matrix_dataset(X, TR=2, run_length=100)"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/n_runs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get number of runs from sampling frame — n_runs","title":"Get number of runs from sampling frame — n_runs","text":"Get number runs sampling frame","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/n_runs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get number of runs from sampling frame — n_runs","text":"","code":"n_runs(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/n_runs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get number of runs from sampling frame — n_runs","text":"x Sampling frame object ... Additional arguments","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/n_timepoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Get number of timepoints from sampling frame — n_timepoints","title":"Get number of timepoints from sampling frame — n_timepoints","text":"Get number timepoints sampling frame","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/n_timepoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get number of timepoints from sampling frame — n_timepoints","text":"","code":"n_timepoints(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/n_timepoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get number of timepoints from sampling frame — n_timepoints","text":"x Sampling frame object ... Additional arguments","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/nifti-backend.html","id":null,"dir":"Reference","previous_headings":"","what":"NIfTI Storage Backend — nifti-backend","title":"NIfTI Storage Backend — nifti-backend","text":"storage backend implementation NIfTI format neuroimaging data. Supports file-based -memory NIfTI data.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/nifti-backend.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"NIfTI Storage Backend — nifti-backend","text":"NiftiBackend can work : File paths NIfTI images Pre-loaded niftiImage objects (RNifti package) neuroim2 NeuroVec objects","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/nifti_backend.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a NIfTI Backend — nifti_backend","title":"Create a NIfTI Backend — nifti_backend","text":"Create NIfTI Backend","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/nifti_backend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a NIfTI Backend — nifti_backend","text":"","code":"nifti_backend(   source,   mask_source,   preload = FALSE,   mode = c(\"normal\", \"bigvec\", \"mmap\", \"filebacked\") )"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/nifti_backend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a NIfTI Backend — nifti_backend","text":"source Character vector file paths list -memory niftiImage/NeuroVec objects mask_source File path mask -memory NeuroVol object preload Logical, whether eagerly load data memory mode Storage mode file-backed data: 'normal', 'bigvec', 'mmap', 'filebacked'","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/nifti_backend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a NIfTI Backend — nifti_backend","text":"nifti_backend S3 object","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/print.html","id":null,"dir":"Reference","previous_headings":"","what":"Pretty Print a Chunk Iterator — print.fmri_dataset","title":"Pretty Print a Chunk Iterator — print.fmri_dataset","text":"function prints summary chunk iterator using colored output. function prints summary data chunk using crayon colored output.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pretty Print a Chunk Iterator — print.fmri_dataset","text":"","code":"# S3 method for class 'fmri_dataset' print(x, ...)  # S3 method for class 'latent_dataset' print(x, ...)  # S3 method for class 'chunkiter' print(x, ...)  # S3 method for class 'data_chunk' print(x, ...)  # S3 method for class 'matrix_dataset' print(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pretty Print a Chunk Iterator — print.fmri_dataset","text":"x data_chunk object. ... Additional arguments (ignored).","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/read_fmri_config.html","id":null,"dir":"Reference","previous_headings":"","what":"read a basic fMRI configuration file — read_fmri_config","title":"read a basic fMRI configuration file — read_fmri_config","text":"read basic fMRI configuration file","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/read_fmri_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read a basic fMRI configuration file — read_fmri_config","text":"","code":"read_fmri_config(file_name, base_path = NULL)"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/read_fmri_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read a basic fMRI configuration file — read_fmri_config","text":"file_name name configuration file base_path file path prepended relative file names","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/read_fmri_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"read a basic fMRI configuration file — read_fmri_config","text":"fmri_config instance","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Get samples from sampling frame — samples","title":"Get samples from sampling frame — samples","text":"Get samples sampling frame","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get samples from sampling frame — samples","text":"","code":"samples(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get samples from sampling frame — samples","text":"x Sampling frame object ... Additional arguments","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/sampling_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampling Frame for fMRI Temporal Structure — sampling_frame","title":"Sampling Frame for fMRI Temporal Structure — sampling_frame","text":"Creates manipulates sampling frame objects represent temporal structure fMRI datasets. sampling frame encapsulates run lengths, repetition time (TR), provides derived temporal properties.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/sampling_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampling Frame for fMRI Temporal Structure — sampling_frame","text":"","code":"sampling_frame(run_length, TR)"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/sampling_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sampling Frame for fMRI Temporal Structure — sampling_frame","text":"run_length numeric vector run lengths (number timepoints per run) TR Repetition time seconds","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/sampling_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sampling Frame for fMRI Temporal Structure — sampling_frame","text":"sampling_frame object","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/stop_fmridataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Stop with a Custom Error — stop_fmridataset","title":"Stop with a Custom Error — stop_fmridataset","text":"Stop Custom Error","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/stop_fmridataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stop with a Custom Error — stop_fmridataset","text":"","code":"stop_fmridataset(error_fn, ...)"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/stop_fmridataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stop with a Custom Error — stop_fmridataset","text":"error_fn Error constructor function ... Arguments passed error constructor","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/storage-backend.html","id":null,"dir":"Reference","previous_headings":"","what":"Storage Backend S3 Contract — storage-backend","title":"Storage Backend S3 Contract — storage-backend","text":"Defines S3 generic functions storage backends must implement. provides pluggable architecture different data storage formats.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/storage-backend.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Storage Backend S3 Contract — storage-backend","text":"storage backend responsible : Managing stateful resources (file handles, connections) Providing dimension information Reading data canonical timepoints × voxels orientation Providing mask information Extracting metadata","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/validate_backend.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Backend Implementation — validate_backend","title":"Validate Backend Implementation — validate_backend","text":"Validates backend implements required contract correctly.","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/validate_backend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Backend Implementation — validate_backend","text":"","code":"validate_backend(backend)"},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/validate_backend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Backend Implementation — validate_backend","text":"backend storage backend object","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/reference/validate_backend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Backend Implementation — validate_backend","text":"TRUE valid, otherwise throws error","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmridataset/news/index.html","id":"new-features-development-version","dir":"Changelog","previous_headings":"","what":"New features","title":"fmridataset (development version)","text":"Added comprehensive CI/CD pipeline GitHub Actions Added test coverage reporting codecov Added code style checking automatic formatting Added issue PR templates better project management","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/news/index.html","id":"bug-fixes-development-version","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"fmridataset (development version)","text":"Fixed chunking edge case nchunks > number voxels Updated deprecated with_mock() calls with_mocked_bindings() Fixed dimensional consistency issues storage backends Resolved test failures package refactoring","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/news/index.html","id":"documentation-development-version","dir":"Changelog","previous_headings":"","what":"Documentation","title":"fmridataset (development version)","text":"Added comprehensive README badges examples Improved package architecture documentation Added codecov configuration coverage reporting","code":""},{"path":"https://bbuchsbaum.github.io/fmridataset/news/index.html","id":"internal-changes-development-version","dir":"Changelog","previous_headings":"","what":"Internal changes","title":"fmridataset (development version)","text":"Refactored monolithic codebase modular architecture Improved test organization coverage Enhanced error handling validation Modernized CI/CD workflows tooling","code":""}]
